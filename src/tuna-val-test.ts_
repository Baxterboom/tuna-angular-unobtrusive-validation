/// <reference path="tuna-val.ts" />
/// <reference path="tuna-val-consts.ts" />

describe(`Tuna.Validator.validators`, function () {
    var modelValue, viewValue, scope, element, attrs;

    describe(`equalto`, function () {
        let isValid;

        beforeEach(() => {
            attrs = { valOther: `#target-other` };
            element = angular.element(`<input type="text" id="target-other" value="666"></div>`);
            angular.element('body').append(element);
            isValid = Tuna.Validator.Validators[`equalto`].rule(scope, element, attrs);
        })

        afterEach(() => {
            if (element) element.remove();
        })

        it(`should exist`, function () {
            expect(isValid).toBeDefined();
        });

        it(`should be valid string`, function () {
            viewValue = `666`;
            var result = isValid(viewValue, modelValue);
            expect(result).toBe(true);
        });

        it(`should be valid number`, function () {
            viewValue = 666;
            var result = isValid(viewValue, modelValue);
            expect(result).toBe(true);
        });

        it(`should be invalid when not same value`, function () {
            viewValue = `not-same-value`;
            var result = isValid(viewValue, modelValue);
            expect(result).toBe(false);
        });

    });

    describe(`required`, function () {
        let isValid;

        beforeEach(() => {
            isValid = Tuna.Validator.Validators[`required`].rule(scope, element, attrs);
        })

        it(`should exist`, function () {
            expect(isValid).toBeDefined();
        });

        it(`should be valid`, function () {
            viewValue = `some input`;
            var result = isValid(viewValue, modelValue);
            expect(result).toBe(true);
        });

        it(`should be invalid when null`, function () {
            viewValue = null;
            var result = isValid(viewValue, modelValue);
            expect(result).toBe(false);
        });

        it(`should be invalid when undefined`, function () {
            viewValue = undefined;
            var result = isValid(viewValue, modelValue);
            expect(result).toBe(false);
        });

        it(`should be invalid when empty string`, function () {
            viewValue = ``;
            var result = isValid(viewValue, modelValue);
            expect(result).toBe(false);
        });

        it(`should be valid when empty string(s)`, function () {
            viewValue = `    `;
            var result = isValid(viewValue, modelValue);
            expect(result).toBe(true);
        });

    });

    describe(`regex`, function () {
        let isValid;

        beforeEach(() => {
            attrs = { valRegexPattern: `^match-this` };
            isValid = Tuna.Validator.Validators[`regex`].rule(scope, element, attrs);
        })

        it(`should exist`, function () {
            expect(isValid).toBeDefined();
        });

        it(`should be valid`, function () {
            viewValue = `match-this`;
            var result = isValid(viewValue, modelValue);
            expect(result).toBe(true);
        });

        it(`should be invalid when not matching`, function () {
            viewValue = `dont-match-value`;
            var result = isValid(viewValue, modelValue);
            expect(result).toBe(false);
        });

    });

    describe(`date`, function () {
        let isValid;

        beforeEach(() => {
            isValid = Tuna.Validator.Validators[`date`].rule(scope, element, attrs);
        })

        it(`should exist`, function () {
            expect(isValid).toBeDefined();
        });

        it(`should be valid 2011-02-20`, function () {
            viewValue = `2011-02-20`;
            var result = isValid(viewValue, modelValue);
            expect(result).toBe(true);
        });

        it(`should be valid 2011-02`, function () {
            viewValue = `2011-02`;
            var result = isValid(viewValue, modelValue);
            expect(result).toBe(true);
        });

        it(`should be valid 2011-02`, function () {
            viewValue = `2011`;
            var result = isValid(viewValue, modelValue);
            expect(result).toBe(true);
        });

        it(`should be valid when 02-20`, function () {
            viewValue = `02-20`;
            var result = isValid(viewValue, modelValue);
            expect(result).toBe(true);
        });

        it(`should be invalid when 02`, function () {
            viewValue = `02`;
            var result = isValid(viewValue, modelValue);
            expect(result).toBe(false);
        });

        it(`should be invalid when ABCDEFG`, function () {
            viewValue = `ABCDEFG`;
            var result = isValid(viewValue, modelValue);
            expect(result).toBe(false);
        });


    });

    describe(`digits`, function () {
        let isValid;

        beforeEach(() => {
            isValid = Tuna.Validator.Validators[`digits`].rule(scope, element, attrs);
        })

        it(`should exist`, function () {
            expect(isValid).toBeDefined();
        });

        it(`should be valid when 6`, function () {
            viewValue = `6`;
            var result = isValid(viewValue, modelValue);
            expect(result).toBe(true);
        });

        it(`should be valid when 666`, function () {
            viewValue = `666`;
            var result = isValid(viewValue, modelValue);
            expect(result).toBe(true);
        });

        it(`should be invalid when decimals`, function () {
            viewValue = `6.6`;
            var result = isValid(viewValue, modelValue);
            expect(result).toBe(false);
        });

        it(`should be invalid`, function () {
            viewValue = `dont-match-value`;
            var result = isValid(viewValue, modelValue);
            expect(result).toBe(false);
        });

    });

    describe(`number`, function () {
        let isValid;

        beforeEach(() => {
            isValid = Tuna.Validator.Validators[`number`].rule(scope, element, attrs);
        })

        it(`should exist`, function () {
            expect(isValid).toBeDefined();
        });

        it(`should be valid when 6`, function () {
            viewValue = `6`;
            var result = isValid(viewValue, modelValue);
            expect(result).toBe(true);
        });

        it(`should be valid when decimals`, function () {
            viewValue = `6.6`;
            var result = isValid(viewValue, modelValue);
            expect(result).toBe(true);
        });

        it(`should be invalid`, function () {
            viewValue = `dont-match-value`;
            var result = isValid(viewValue, modelValue);
            expect(result).toBe(false);
        });

    });

    describe(`email`, function () {
        let isValid;

        beforeEach(() => {
            isValid = Tuna.Validator.Validators[`email`].rule(scope, element, attrs);
        })

        it(`should exist`, function () {
            expect(isValid).toBeDefined();
        });

        it(`should be valid`, function () {
            viewValue = `tuna@world.com`;
            var result = isValid(viewValue, modelValue);
            expect(result).toBe(true);
        });

        it(`should be valid when pre domains`, function () {
            viewValue = `tuna.domain@world.com`;
            var result = isValid(viewValue, modelValue);
            expect(result).toBe(true);
        });

        it(`should be valid when post domains`, function () {
            viewValue = `tuna@world.co.uk`;
            var result = isValid(viewValue, modelValue);
            expect(result).toBe(true);
        });

        it(`should be valid when domains`, function () {
            viewValue = `tuna.domain@world.co.uk`;
            var result = isValid(viewValue, modelValue);
            expect(result).toBe(true);
        });

        it(`should be valid when ''`, function () {
            viewValue = ``;
            var result = isValid(viewValue, modelValue);
            expect(result).toBe(true);
        });

        it(`should be valid when null`, function () {
            viewValue = null;
            var result = isValid(viewValue, modelValue);
            expect(result).toBe(true);
        });

        it(`should be valid when undefined`, function () {
            viewValue = undefined;
            var result = isValid(viewValue, modelValue);
            expect(result).toBe(true);
        });

        it(`should be invalid when no @`, function () {
            viewValue = `no-snabel-a.com`;
            var result = isValid(viewValue, modelValue);
            expect(result).toBe(false);
        });

        it(`should be invalid when no pre domain`, function () {
            viewValue = `@world.com`;
            var result = isValid(viewValue, modelValue);
            expect(result).toBe(false);
        });

        it(`should be invalid when no post domain`, function () {
            viewValue = `tuna@`;
            var result = isValid(viewValue, modelValue);
            expect(result).toBe(false);
        });
    });

    describe(`range`, function () {
        let isValid;

        beforeEach(() => {
            attrs = {};
            attrs.valRangeMin = 0;
            attrs.valRangeMax = 2;
            isValid = Tuna.Validator.Validators[`range`].rule(scope, element, attrs);
        })

        it(`should exist`, function () {
            expect(isValid).toBeDefined();
        });

        it(`should be valid when ''`, function () {
            viewValue = ``;
            var result = isValid(viewValue, modelValue);
            expect(result).toBe(true);
        });

        it(`should be valid when null`, function () {
            viewValue = null;
            var result = isValid(viewValue, modelValue);
            expect(result).toBe(true);
        });

        it(`should be valid when undefined`, function () {
            viewValue = undefined;
            var result = isValid(viewValue, modelValue);
            expect(result).toBe(true);
        });

        it(`should be valid when 0`, function () {
            viewValue = `0`;
            var result = isValid(viewValue, modelValue);
            expect(result).toBe(true);
        });

        it(`should be valid when 1`, function () {
            viewValue = `1`;
            var result = isValid(viewValue, modelValue);
            expect(result).toBe(true);
        });

        it(`should be valid when 1.5`, function () {
            viewValue = `1.5`;
            var result = isValid(viewValue, modelValue);
            expect(result).toBe(true);
        });

        it(`should be valid when 2`, function () {
            viewValue = `2`;
            var result = isValid(viewValue, modelValue);
            expect(result).toBe(true);
        });

        it(`should be invalid when 2.00001`, function () {
            viewValue = `2.00001`;
            var result = isValid(viewValue, modelValue);
            expect(result).toBe(false);
        });

        it(`should be invalid when isNaN`, function () {
            viewValue = `this-is-not-a-number`;
            var result = isValid(viewValue, modelValue);
            expect(result).toBe(false);
        });

        it(`should be invalid when -1`, function () {
            viewValue = `-1`;
            var result = isValid(viewValue, modelValue);
            expect(result).toBe(false);
        });

        it(`should be invalid when 4`, function () {
            viewValue = `4`;
            var result = isValid(viewValue, modelValue);
            expect(result).toBe(false);
        });
    });

    describe(`length`, function () {
        let isValid;

        beforeEach(() => {
            attrs = {};
            attrs.valLengthMin = 0;
            attrs.valLengthMax = 2;
            isValid = Tuna.Validator.Validators[`length`].rule(scope, element, attrs);
        })

        it(`should exist`, function () {
            expect(isValid).toBeDefined();
        });

        it(`should be valid when ''`, function () {
            viewValue = ``;
            var result = isValid(viewValue, modelValue);
            expect(result).toBe(true);
        });

        it(`should be valid when null`, function () {
            viewValue = null;
            var result = isValid(viewValue, modelValue);
            expect(result).toBe(true);
        });

        it(`should be valid when undefined`, function () {
            viewValue = undefined;
            var result = isValid(viewValue, modelValue);
            expect(result).toBe(true);
        });

        it(`should be valid when a`, function () {
            viewValue = `a`;
            var result = isValid(viewValue, modelValue);
            expect(result).toBe(true);
        });

        it(`should be valid when ab`, function () {
            viewValue = `ab`;
            var result = isValid(viewValue, modelValue);
            expect(result).toBe(true);
        });

        it(`should be invalid when abc`, function () {
            viewValue = `abc`;
            var result = isValid(viewValue, modelValue);
            expect(result).toBe(false);
        });
    });
});
